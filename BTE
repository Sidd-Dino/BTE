#!/usr/bin/env bash
#  ______     ______   ______    
# /\  == \   /\__  _\ /\  ___\   
# \ \  __<   \/_/\ \/ \ \  __\   
#  \ \_____\    \ \_\  \ \_____\ 
#   \/_____/     \/_/   \/_____/ 
#                                
# Bash Text Editor
# cos.... Why the fuck not?


# begin code kanging from fff( https://github.com/dylanaraps/fff )
#------------------------------------------------------------------

setup_terminal() {
    # Setup the terminal for the TUI.
    # '\e[?1049h': Use alternative screen buffer.
    # '\e[?7l':    Disable line wrapping.
    # '\e[?25l':   Hide the cursor.
    # '\e[2J':     Clear the screen.
    # '\e[1;Nr':   Limit scrolling to scrolling area.
    #              Also sets cursor to (0,0).
    printf '\e[?1049h\e[?7l\e[2J\e[1;%sr' "$max_lines"

    # Hide echoing of user input
    stty -echo
}

reset_terminal() {
    # Reset the terminal to a useable state (undo all changes).
    # '\e[?7h':   Re-enable line wrapping.
    # '\e[?25h':  Unhide the cursor.
    # '\e[2J':    Clear the terminal.
    # '\e[;r':    Set the scroll region to its default value.
    #             Also sets cursor to (0,0).
    # '\e[?1049l: Restore main screen buffer.
    printf '\e[?7h\e[?25h\e[2J\e[;r\e[?1049l'

    # Show user input.
    stty echo
}

clear_screen() {

    # Only clear the scrolling window (dir item list).
    # '\e[%sH':    Move cursor to bottom of scroll area.
    # '\e[9999C':  Move cursor to right edge of the terminal.
    # '\e[1J':     Clear screen to top left corner (from cursor up).
    # '\e[2J':     Clear screen fully (if using tmux) (fixes clear issues).
    # '\e[1;%sr':  Clearing the screen resets the scroll region(?). Re-set it.
    #              Also sets cursor to (0,0).
    printf '\e[%sH\e[9999C\e[1J%b\e[1;%sr' \
           "$((LINES-2))" "${TMUX:+\e[2J}" "$max_lines"
}

get_term_size() {
    # Get terminal size ('stty' is POSIX and always available).
    # This can't be done reliably across all bash versions in pure bash.
    read -r LINES COLUMNS < <(stty size)

    # Max list items that fit in the scroll area.
    ((max_lines=LINES-3))
}

# end of kanging
#------------------------------------------------------------------

init_vars() {
    # setting up variables for position within file
    x=0
    y=0
    scroll_x=1
    scroll_y=1

    curr_x=0    

    y_start=0
    y_end=$max_lines
}

status_line() {
    
    printf "\e7\e[%sH\e[30;42m%*s\r%s%s%s\e[m\e8"\
            "$((LINES-1))" \
            "$COLUMNS" "" \
            "$((y+1))/$total_lines "\
            "[scrollx/scrolly ($scroll_x/$scroll_y)] "\
            "[x/y $x/$y] [curr_x $curr_x] [curr_line_length ${#file_data[$y]}] [max_lines $max_lines] [y_start: $y_start  y_end: $y_end]"

}

draw_line() {
    local curr=$y

    [[ -n $1 ]] && {
        curr=$*
    }

    printf '\e[2K\r'

    if (( ${#file_data[curr]} < COLUMNS-2 )); then
        printf "%s" "${file_data[curr]}"
    elif (( curr != y || x < (COLUMNS-2) )); then
            printf "%s\e[30;41m%s\e[m" \
                    "${file_data[curr]:0:$((COLUMNS-1))}"\
                    ">"
    else
        local p=$(( (x-COLUMNS-2) / (COLUMNS-5) ))
        x_start=$(( (p*(COLUMNS-5) ) + (COLUMNS-2) ))
        x_end=$(( ( (p+1)*(COLUMNS-5) ) + (COLUMNS-2) ))

        if (( ${#file_data[curr]} < x_end )); then
            printf "\e[30;41m%s\e[m%s" \
                    "<" \
                    "${file_data[curr]:$((x_start-2)):$x_end}"

        else
            printf "\e[30;41m%s\e[m%s\e[30;41m%s\e[m" \
                    "<" \
                    "${file_data[curr]:$((x_start-2)):$((x_end+1))}" \
                    ">"                 
        fi
    fi
}

draw_page() {

    local old_max_lines=$((y_end-y_start))
    local diff=$((max_lines-old_max_lines))

    if (( diff < 0 )); then
        
        (( scroll_y <= max_lines )) && {
            y_end=$((max_lines+y_start))
        }

        (( scroll_y > max_lines )) && {
            scroll_y=$((max_lines))
            y_end=$((y+1))
            y_start=$((y_end-max_lines))
        }

    elif (( diff > 0 )); then
        
        (( total_lines > max_lines )) && {
            local top_offset=$((diff/2))
            local bot_offset=$(( (diff/2)+(diff%2) ))
            if (( y_start <= top_offset )); then
                y_start=0
                y_end=$((y_end+top_offset))
            else
                y_start=$((y_start-top_offset))
            fi

            y_end=$((y_end+bot_offset))

            scroll_y=$((y-y_start+1))
        }
        
        (( total_lines <= max_lines )) && {
            y_start=0
            y_end=$((max_lines))
            scroll_y=$((y+1))
        }
    fi


    for ((i=y_start;i<y_end;i++)); do
            draw_line "$i"     
            (( i+1 < y_end )) && printf "\n"
    done 
}

sync_cursor() {
    if (( curr_x >= ${#file_data[y]} )); then
        x=$((${#file_data[y]}-1))
    else
        x=$curr_x
    fi

    if (( x < (COLUMNS-2) )); then
        scroll_x=$((x+1))
    else
        local p=$(( (x-COLUMNS-2) / (COLUMNS-5) ))
        x_start=$(( (p*(COLUMNS-5) ) + (COLUMNS-2) ))
        x_end=$(( ( (p+1)*(COLUMNS-5) ) + (COLUMNS-2) ))

        scroll_x=$(( x-x_start+4 ))
    fi

    printf '\e[%s;%sH' "$scroll_y" "$scroll_x"

}

redraw() {
    clear_screen
    draw_page
    sync_cursor
    status_line
}


# Movement Fucntions

move_up () {
    (( y >= 1 )) && {
        x=0
        draw_line
        x=$curr_x

        ((y--))

        if (( scroll_y > 1 )); then
            ((scroll_y--))
            printf '\e[A\e2K'
        else
            printf '\e[1L'
            ((y_start--))
            ((y_end--))
        fi

        draw_line
        sync_cursor
        status_line
    }
}

move_down () {
    (( y+1 < total_lines )) && {
        x=0
        draw_line
        x=$curr_x

        ((y++))
        
        if (( scroll_y < max_lines )); then
            ((scroll_y++))
            printf '\e[B\e[2K'
        else
            printf '\n'
            ((y_start++))
            ((y_end++))
        fi

        draw_line
        sync_cursor
        status_line
    }
}

move_left () {
    if (( x > 0 )); then
        ((x--))
        curr_x=$x
        draw_line
        sync_cursor
        status_line
    else
        x=$(( ${#file_data[y-1]}-1 ))
        curr_x=$x
        move_up
    fi
}

move_right () {
    if (( x+1 < ${#file_data[y]} )); then
        ((x++))
        curr_x=$x
        draw_line
        sync_cursor
        status_line
    elif (( y+1 < total_lines )); then
        x=0
        curr_x=$x
        move_down
    fi
}

# Text Editing Functions

insert_character () {
    ((x++))
    curr_x=$x
    file_data[$y]="${file_data[y]::x-1}$1${file_data[y]:x-1}"
}

insert_newline () {
    
    file_data=( "${file_data[@]::y}" "${file_data[y]::x} " "${file_data[y]:x}" "${file_data[@]:y+1}" )
    ((y++))
    ((x=0))
    ((curr_x=0))
    ((total_lines++))
    (( scroll_y == max_lines )) && {
        draw_line "$((y-1))"
        printf '\n'
        draw_line
    }

    (( scroll_y < max_lines )) && {
        draw_line
        printf '\e[1L'
        draw_line "$((y-1))"
        ((scroll_y++))
    }
}

bckspc () {

    (( x == 0 )) && {
        (( y < 1 )) && return;
        
        ((x=${#file_data[y-1]}-1))
        ((curr_x=${#file_data[y-1]}-1))

        file_data=( "${file_data[@]::y-1}" "${file_data[y-1]::-1}${file_data[y]}" "${file_data[@]:y+1}" )

        ((y--))
        ((total_lines--))

        (( scroll_y == 1 )) && {
            printf '\e2K'
            draw_line 
        }

        (( scroll_y > 1 )) && {
            ((scroll_y--))
            printf '\e[A'

            for ((i=0; i<=max_lines-scroll_y; i++)); do
                draw_line "$((y+i))"
                (( i < max_lines-scroll_y )) && printf "\n"
            done 
        }

        return
    }

    (( x > 0 )) && {
        
        file_data[y]="${file_data[y]::x-1}${file_data[y]:x}"

        ((x--))
        ((curr_x=x))
        printf '\e2K'
        draw_line
        return
    }

}

key() {

    local special_keys

    [[ $1 == $'\e' ]] && {
        special_keys+=${1}
        #! debug
        printf "R 1 : %s\n" "${1}" >> logfile

        # \e A
        # \e [ A
        # \e [ 6 ~
        # \e [ 2 0 ~
        # \e [ 1 ; 5~
        # \e [ 1 ; 5C
        # -- - - - --
        #  1 2 3 4 5

        #* read 2
        read "${read_flags[@]}" -srn 1
        special_keys+=${REPLY}
        #! debug
        printf "R 2 : %s\n" "${REPLY}" >> logfile

        [[ $REPLY == $'[' ]] && {
            #* read 3
            read "${read_flags[@]}" -srn 1
            special_keys+=${REPLY}
            #! debug
            printf "R 3 : %s\n" "${REPLY}" >> logfile

            [[ ${REPLY} == [0-9] ]] && {
                #* read 4
                read "${read_flags[@]}" -srn 1
                special_keys+=${REPLY}
                #! debug
                printf "R 4 : %s\n" "${REPLY}" >> logfile
                
                [[ ${REPLY} == [[:digit:]] ]] && {
                    read "${read_flags[@]}" -srn 1 _
                    special_keys+="~"
                }

                [[ ${REPLY} == ";" ]] && {
                    read "${read_flags[@]}" -srn 2
                    special_keys+=${REPLY}
                    #! debug
                    printf "R 5 : %s\n" "${REPLY}" >> logfile
                }
            }
        }
        
    }

    printf "\$1: %q\nspecial_keys: %q\n"\
            "$1"\
            "$special_keys" >> logfile

    printf "%s\n" "-----------------------------" >> logfile

    case "${special_keys:-$1}" in

        "${SCROLL_RIGHT1:=$'\e[C'}"|\
        "${SCROLL_RIGHT2:=$'\eOC'}")
            move_right
        ;;

        "${SCROLL_LEFT1:=$'\e[D'}"|\
        "${SCROLL_LEFT2:=$'\eOD'}")
            move_left
        ;;

        "${SCROLL_UP2:=$'\e[A'}"|\
        "${SCROLL_UP3:=$'\eOA'}")
            move_up
        ;;

        "${SCROLL_DOWN2:=$'\e[B'}"|\
        "${SCROLL_DOWN3:=$'\eOB'}")
            move_down
        ;;
        
        "${QUIT_KEY:=$'\030'}")
            exit
        ;;

        "${NEWLINE:=""}")
            insert_newline
            sync_cursor
            status_line
        ;;

        "${BCKSPC1:=$'\b'}"|\
        "${BCKSPC2:=$'\177'}")
            bckspc  
            sync_cursor
            status_line
        ;;

        "${PGUP:=$'\E[5~'}")
            ((x=0))
            ((curr_x=0))

            if (( y_start == 0 )); then
                ((y=0))
                ((scroll_y=1))
            elif (( y_start >= max_lines )); then
                (( y_end=y_start ))
                (( y_start=y_start-max_lines ))
                (( y=y_start+scroll_y-1 ))
            elif (( y_start <= max_lines )); then
                (( y_start=0 ))
                (( y_end=max_lines ))
                
                (( y-max_lines < 0 )) && {
                    (( y=0 ))
                    (( scroll_y=1 ))
                }

                (( y-max_lines >= 0 )) && {
                    (( y=y-max_lines ))
                    (( scroll_y=y+1 ))
                }
            fi

            redraw
        ;;

        "${PGDWN:=$'\E[6~'}")
            ((x=0))
            ((curr_x=0))

            if (( y_end >= total_lines )); then
                (( y=total_lines-1 ))
                (( scroll_y=total_lines-y_start))
            elif (( y_end+max_lines <= total_lines )); then
                (( y_start=y_end ))
                (( y_end=y_start+max_lines ))
                (( y=y+max_lines ))
            else
                (( y_start=y_end ))
                (( y_end=y_start+max_lines ))

                (( y_start+scroll_y-1 >= total_lines )) && {
                    (( y=total_lines-1 ))
                    (( scroll_y=total_lines-y_start))
                }

                (( y_start+scroll_y-1 < total_lines )) && {
                    (( y=y_start+scroll_y-1 ))
                }
            fi

            redraw
        ;;

        "${HOME_KEY:=$'\E[1~'}")
            ((x=0))
            ((curr_x=0))
            draw_line
            sync_cursor
            status_line
        ;;

        "${END_KEY:=$'\E[4~'}")
            ((x=${#file_data[y]}))
            ((curr_x=${#file_data[y]}))
            draw_line
            sync_cursor
            status_line
        ;;

        "${REDRAW:=$'\E[15~'}")
            redraw
        ;;

        [[:alnum:]] |\
        [[:punct:]] |\
        " ")
            insert_character "$1"
            printf '\e2K'
            draw_line
            sync_cursor
            status_line
        ;;
        
    esac

}

# File handling Functions

check_file() {

    local link_path

    [[ ! -a "$*" ]] && printf "%s\n" "[ERR] File $* does not exist" && exit

    [[ ! -r $* ]] && printf "%s\n" "[ERR] File $* can't be read" && exit

    [[ -d $* ]] && printf "%s\n" "[ERR] File $* is a directory" && exit

    [[ -h $* ]] && {
        link_path=$( readlink -f "$*" )
        check_file "${link_path// /\\ }"
        return
    }

    file=$( readlink -f "$*" )
}

read_file() {
    #IFS= read -d "" -ra file_data < "$file"
    mapfile -t file_data < "$file"

    # file line count 
    total_lines="${#file_data[*]}"

    # Adding a ' ' to the end of each line to allow
    # editing the last character of a line 
    for (( i=0;i<total_lines;i++ ));do
        file_data[$i]+=" "
    done
}

main() {
    

    [[ $1 == -v ]] && {
        printf '%s\n' "BTE 0.1"
        exit
    }

    # Check to see of a file name has been passsed
    if [[ -n $* ]]; then
        check_file "$*"
    fi

    # load file onto array file_data
    read_file

    #! debug statements
    printf "%s\n" "$0 $* $file" >> ~/Documents/PROJECTS/IN_GIT/BTE/logfile

    read_flags=(-t 0.005)
    
    # Trap the exit signal (we need to reset the terminal to a useable state.)
    trap 'reset_terminal' EXIT

    # Trap the window resize signal (handle window resize events).
    trap 'get_term_size; redraw' WINCH

    #get_os
    get_term_size
    init_vars
    setup_terminal
    redraw

    # Vintage infinite loop.
    for ((;;)); {
        read -t 0.04 -srn 1 && key "$REPLY"

        (:;:) && (:;:) && (:;:) && (:;:) && (:;:)
        
        # Exit if there is no longer a terminal attached.
        [[ -t 1 ]] || exit 1
    }
}

main "$@"